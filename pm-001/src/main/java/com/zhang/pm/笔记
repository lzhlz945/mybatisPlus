1、配置上mp:
   只需要把SqlSessionFactoryBean改成MybatisSqlSessionFactoryBean；

2、执行一次增加操作要
     建立接口实现BaseMapper
    * @TableId:
   	 * 	 value: 指定表中的主键列的列名， 如果实体属性名与列名一致，可以省略不指定.
   	 *   type: 指定主键策略.
   	 @TableName(vale="数据库中的表名")

3、配置全局的mp在spring中
   创建全局bean：globalConfiguration
   把这个引入ref到MybatisSqlSessionFactoryBean中
        <property name="dbColumnUnderline" value="true"/>
        <property name="idType" value="0"/>
        <property name="tablePrefix" value="tbl_"/>

4、新增字段和返回主键值
     @TableField(exist = false)
    	private Double salary ; 这样可以忽略
     pm中直接把插入的对象封装到了实体bean中
     以前：useGeneratedKeys="true" keyProperty="id"

5、查询批量id与mybatis的区别(in)
    mybatis:
    select * from tbl_employee where id in
           <foreach collection="list" item="ee" open="(" close=")" separator=",">
               #{ee}
           </foreach>
    mp:
    List<Employee> employees = employeeMapper.selectBatchIds(list);
6、pm执行原理：
   sqlSessionFactory---configuration(保存了所有mybatis的配置)---MappedStatement(mapper中的每条sql语句)

   Configuration： MyBatis 或者 MP 全局配置对象
   MappedStatement：一个 MappedStatement 对象对应 Mapper 配置文件中的一个
   select/update/insert/delete 节点，主要描述的是一条 SQL 语句
   SqlMethod : 枚举对象 ，MP 支持的 SQL 方法
   TableInfo：数据库表反射信息 ，可以获取到数据库表相关的信息
   SqlSource: SQL 语句处理对象
   MapperBuilderAssistant： 用于缓存、SQL 参数、查询方剂结果集处理等.
   通过 MapperBuilderAssistant 将每一个 mappedStatement
   添加到 configuration 中的 mappedStatements 中


    sql自动注射：AutoSqlInjector
    protected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?> modelClass, TableInfo table) {
           SqlMethod sqlMethod = SqlMethod.DELETE_BY_ID;
           String idStr = table.getKeyProperty();
           if (batch) {
               sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
               StringBuilder ids = new StringBuilder();
               ids.append("\n<foreach item=\"item\" index=\"index\" collection=\"coll\" separator=\",\">");
               ids.append("#{item}");
               ids.append("\n</foreach>");
               idStr = ids.toString();
           }

           String sql = String.format(sqlMethod.getSql(), table.getTableName(), table.getKeyColumn(), idStr);
           SqlSource sqlSource = this.languageDriver.createSqlSource(this.configuration, sql, modelClass);
           this.addDeleteMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource);
       }

7、条件选择器：EntityWrapper
      selectPage(new Page<Employee>(1, 2), new EntityWrapper<Employee>()
                      .between("age", 18, 50).eq("last_name", "zhang")
                      .eq("gender", 1));
      .or()和orNew()的区别
      .or()  //(last_name = ? AND email LIKE ? OR email LIKE ?)
      .orNew() //(last_name = ? AND email LIKE ?) OR (email LIKE ?)