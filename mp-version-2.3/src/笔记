1、配置上mp:
   只需要把SqlSessionFactoryBean改成MybatisSqlSessionFactoryBean；

2、执行一次增加操作要
     建立接口实现BaseMapper
    * @TableId:
   	 * 	 value: 指定表中的主键列的列名， 如果实体属性名与列名一致，可以省略不指定.
   	 *   type: 指定主键策略.
   	 @TableName(vale="数据库中的表名")

3、配置全局的mp在spring中
   创建全局bean：globalConfiguration
   把这个引入ref到MybatisSqlSessionFactoryBean中
        <property name="dbColumnUnderline" value="true"/>
        <property name="idType" value="0"/>
        <property name="tablePrefix" value="tbl_"/>

4、新增字段和返回主键值
     @TableField(exist = false)
    	private Double salary ; 这样可以忽略
     pm中直接把插入的对象封装到了实体bean中
     以前：useGeneratedKeys="true" keyProperty="id"

5、查询批量id与mybatis的区别(in)
    mybatis:
    select * from tbl_employee where id in
           <foreach collection="list" item="ee" open="(" close=")" separator=",">
               #{ee}
           </foreach>
    mp:
    List<Employee> employees = employeeMapper.selectBatchIds(list);
6、mp执行原理：
   sqlSessionFactory---configuration(保存了所有mybatis的配置)---MappedStatement(mapper中的每条sql语句)

   Configuration： MyBatis 或者 MP 全局配置对象
   MappedStatement：一个 MappedStatement 对象对应 Mapper 配置文件中的一个
   select/update/insert/delete 节点，主要描述的是一条 SQL 语句
   SqlMethod : 枚举对象 ，MP 支持的 SQL 方法
   TableInfo：数据库表反射信息 ，可以获取到数据库表相关的信息
   SqlSource: SQL 语句处理对象
   MapperBuilderAssistant： 用于缓存、SQL 参数、查询方剂结果集处理等.
   通过 MapperBuilderAssistant 将每一个 mappedStatement
   添加到 configuration 中的 mappedStatements 中


    sql自动注射：AutoSqlInjector
    protected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?> modelClass, TableInfo table) {
           SqlMethod sqlMethod = SqlMethod.DELETE_BY_ID;
           String idStr = table.getKeyProperty();
           if (batch) {
               sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
               StringBuilder ids = new StringBuilder();
               ids.append("\n<foreach item=\"item\" index=\"index\" collection=\"coll\" separator=\",\">");
               ids.append("#{item}");
               ids.append("\n</foreach>");
               idStr = ids.toString();
           }

           String sql = String.format(sqlMethod.getSql(), table.getTableName(), table.getKeyColumn(), idStr);
           SqlSource sqlSource = this.languageDriver.createSqlSource(this.configuration, sql, modelClass);
           this.addDeleteMappedStatement(mapperClass, sqlMethod.getMethod(), sqlSource);
       }

7、条件选择器：EntityWrapper
      selectPage(new Page<Employee>(1, 2), new EntityWrapper<Employee>()
                      .between("age", 18, 50).eq("last_name", "zhang")
                      .eq("gender", 1));
      .or()和orNew()的区别
      .or()  //(last_name = ? AND email LIKE ? OR email LIKE ?)
      .orNew() //(last_name = ? AND email LIKE ?) OR (email LIKE ?)

      orderBy和last(last总是最后执行可以类似于拼接字符串)
      .orderBy("age").last("asc limit 1,3")

      跟新后：UpdateWrapper 、QueryWrapper
      配置文件：         <!--mp的全局配置-->
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig" name="globalConfiguration">
                <property name="dbConfig">
                    <bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig">
                        <!--声明全局默认类名的对应的表的前缀-->
                        <property name="tablePrefix" value="tbl_"></property>
                        <!--配置全局主键自增-->
                        <property name="idType" value="AUTO"></property>
                    </bean>
                </property>
            </bean>

8、activityRecord:
    bean继承Model<xx>
    重写 @Override
       	protected Serializable pkVal() {
       		return id;
       	}


9、插件
 1 Mybatis 插件机制简介

  1) 插件机制: Mybatis 通过插件(Interceptor) 可以做到拦截四大对象相关方法的执行,根据需求，完
  成相关数据的动态改变。
   Executor
   StatementHandler
   ParameterHandler
   ResultSetHandler

  2) 插件原理
       四大对象的每个对象在创建时，都会执行 interceptorChain.pluginAll()，会经过每个插
       件对象的 plugin()方法，目的是为当前的四大对象创建代理。代理对象就可以拦截到四
       大对象相关方法的执行，因为要执行四大对象的方法需要经过代理.
  在statementHandler的实现类中defaultHandler的构造方法中：
        ①：会创建：parameterHandler和resultHandler
        this.parameterHandler = this.configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);
        this.resultSetHandler = this.configuration.newResultSetHandler(executor, mappedStatement, rowBounds, this.parameterHandler, resultHandler, boundSql);



        ②：在Configuration中会创建parameterHandler和resultHandler
           interceptorChain.pluginAll(parameterHandler)访问pluginAll


        ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);
        parameterHandler = (ParameterHandler)this.interceptorChain.pluginAll(parameterHandler);
            public Object pluginAll(Object target) {
                        Interceptor interceptor;
                        for(Iterator var2 = this.interceptors.iterator(); var2.hasNext(); target = interceptor.plugin(target)) {
                            interceptor = (Interceptor)var2.next();
                        }

                        return target;
                    }
        ③：在pluginAll引入Interceptor俩遍历plugin，target = interceptor.plugin(target)来返回被代理的对象；


 10、分页插件和 Sql执行分析示例
 <bean id="mybatisPlusInterceptor" class="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor">
                 <property name="interceptors">
                         <list>
                               sql分页
                                 <ref bean="paginationInnerInterceptor"/>
                                Sql执行分析示例
                                 <ref bean="blockAttackInnerInterceptor"/>
                         </list>
                 </property>
         </bean>


11、自定义全局配置 2.3版本
   ①、自定义类继承AutoSqlInject继承injector方法
   ②、在spring中注入自定义类，在交给globalConfiguration管理
   ③、在mapper中自定义方法
   ④、在自定义类中仿照AutoSqlInject中的方法写就行

12、逻辑删除
  ①、<bean class="com.baomidou.mybatisplus.mapper.LogicSqlInjector" id="logicSqlInjector"></bean>
  ②、在全局中name="sqlInjector"中引入：
     <!-- 注入逻辑删除全局值 -->
     	 	<property name="logicDeleteValue" value = "-1"></property>
     	 	<property name="logicNotDeleteValue" value="1"></property>
  ③、加入字段：    @TableLogic
             private int logicFiled;